"""Data analysis and visualization of the optimization of spreading process."""

import numpy as np
import pandas as pd
import networkx as nx
import matplotlib.pyplot as plt

dir_result = "./results/"
dir_network = "./artificial_networks/"

graph_name = "ER_N100_d5_seed102"

## Create a networkx graph:
node_data = pd.read_csv(dir_network + graph_name + "_nodes.csv")
edge_data = pd.read_csv(dir_network + graph_name + "_edges.csv")
no_of_nodes, no_of_edges = node_data.shape[0], edge_data.shape[0]
edge_list = [(edge_data.iloc[xe, 1], edge_data.iloc[xe, 2]) for xe in range(no_of_edges)]
graph = nx.Graph(edge_list)

## Read the data generated by SIR_DMP_opt_sigma0.jl:
df = pd.read_csv(dir_result + "sigma0_" + graph_name + ".csv", header=None)
node_type = df.iloc[:, 1]
sigma0_soln = df.iloc[:, 3]
P_IR_T = 1 - df.iloc[:, 4]
sum_P = sum( 1 - df[ df.iloc[:, 1] == 1 ].iloc[:, 4] )      ## \sum_{i \in PTargets} PS_mgn[T+1, i]
sum_N = sum( 1 - df[ df.iloc[:, 1] == -1 ].iloc[:, 4] )      ## \sum_{i \in NTargets} PS_mgn[T+1, i]

node_list = [i for i in range(1, no_of_nodes+1)]
seeds = [i for i in node_list if sigma0_soln[i-1] > 0.9]
non_seeds = [i for i in node_list if sigma0_soln[i-1] < 0.1]

type_to_color = {1:"g", -1:"r", 0:"y"}
node_color = [type_to_color[ node_type[i-1] ] for i in non_seeds]
node_size  = [P_IR_T[i-1]*200 for i in non_seeds]


## Draw the network only:
# pos = nx.spring_layout(graph, seed=200)
# nx.draw(graph, pos)
# nx.draw_networkx_labels(graph, pos)
# plt.show()


## Draw the network, blue triangles are the seeds,
## green nodes => to be influenced, red nodes => to not be influenced, yellow nodes => does not matter,
## The node size of node i is proportional to (1-PS_mgn[T+1, i]).

pos = nx.spring_layout(graph, seed=100)
nx.draw_networkx_nodes(graph, pos, nodelist=seeds, node_color="b", node_shape="^", node_size=100)
nx.draw_networkx_nodes(graph, pos, nodelist=non_seeds, node_color=node_color, node_shape="o", node_size=node_size)
nx.draw_networkx_edges(graph, pos)

plt.title(r"$\sum_{i\in P} (1-P_S^i(T)) = %.3f,  \sum_{i\in N} (1-P_S^i(T)) = %.3f$"%(sum_P, sum_N))

plt.axis("off")
plt.show()
